pipeline{
agent{label 'labelname'}
options{
// only keeps the last 10 builds of this pipelone
buildDiscarder(logRotator(numToKeepStr: '10'))
  discardConcurrentBuild()
// adds timestamps to build logs
}
tools
{
jdk 'JDK_1.8.0-222'
maven 'Maven-Dedicated-Slaves-Only'
}
stages
{
stage('setup')
{
steps
  {
/* set all variariables for job *? */
/*in order to put all the variables craeted in this script block use the following syntax: sh([script: "echo \"Value:$GIT_COMMIT}\]) */
script
{
BRANCH_NAME=sh(script:"echo $GIT_BRANCH|sed -e 's|origin/||g'",returnStdout:true).trim()
  if("$BRANCH_NAME}"=='master')
  {
    echo"BRANCH_NAME:${BRANCH_NAME}"
    BUILD_VERSION='2019.99.0'
    echo "BUILD_VERSION=${BUILD_VERSION}"
  }
  else
  {
    BUILD_VERSION=sh(script:"echo $GIT_BRANCH |sed -e 's|origin/release.||g'",returnStdout:true).trim()
    echo "BUILD_VERSION=${BUILD_VERSION}"
  }
  /*component id need for depoy job */
  UDEPLOY_COMPONENT_ID='component id'
  GIT_COMMIT=sh([script: "git rev-parse HEAD",returnStdout:true]).trim()
  NEXUS_VERSION=sh([script: "git rev-list ${GIT_COMMIT} --count",returnStdout:true]).trim()
  GIT_SIMPLE=sh([script: "git rev-list ${GIT_COMMIT} |head -n 1 |cut -c 1-5",returnStdout:true]).trim()
  //get latest successful build name
  build =currentBuild
  while(build!=null && build.result !='SUCCESS')
  build=build.previousBuild
}
    if (build==null)
    {
      //this means there has not been a success fill build yet
      PREVIOUS_BUILD_VERSION='none'
    }
    else
    {
      PREVIOUS_BUILD_VERSION=build.displayName
    }
    echo "LAST SUCCESS BUILD NAME: ${PREVIOUS_BUILD_VERSION}"
    //srt jenkisn build name to be same as artifact version that will be published
    currentBuild.displayName="${BUILD_VERSION}.${NEXUS_VERSION}-${GIT_SIMPLE}"
  }
}
}
stage(build')
{
steps
{
//build without tests
sh 'echo"building code"'
sh ' gradle clean build -X test'
}
}
stage('test')
{
steps
{
//run gradle tests
sh ' echo"running test"'
sh 'gradle test'
}
post
{
always
{
sh 'echo"publish test results"'
//publish junit test results
// junit '**/build/test-reports/*.xml'
}
}
}
stage('publish')
{
steps
{
sh 'echo "publish"'
// publish

withCredentials([usernamePassword(credentialId: "artifact id" passwordVariable:'RELEASE_DEPLOY_PWD" usernameVariable:'RELEASE_DEPLOY_ID')])
{
bat """ gradle -P username=$RELEASE_DEPLOY_ID -P password=$RELEASE_DEPLOY_PWD --project-prop repositoryName=maven-release --projcet-prop publishSuffix= --project-prop version=${currentBuild.displayName} clean build publish -X tyest """
//// for angular js projects runBuild is mandetory  --build-file build-template.gradle buildVersion=${NEXUS_VERSION}-${GIT_SIMPLE} clean build runBuild war publish """

}
}
}
stage (' Trigger import of component version')
                                            
    {
      when
      {
        expression
        {
          return env. UDEPLOY_COMPONENT_ID!='';
        }
      }
      steps
      {
        sh 'echo"import version for component"'
        withCredentials([usernamePassword(credentialsId: 'UDEPLOY credentials id' usernameVariable: 'UDEPLOY_USER' passwordVariable: 'UDEPLOY_PWD')])
        {
          sh """ curl -k -u ${UDEPLOY_USER}:${UDEPLOY_PWD} https://udeploy.con:8443/cli/component/integrate -X put -d {"component:${COMPONENT_ID}"}
          }
          sleep 10
          }
          }
          }
          }


/// Bat command using GIT_SIMPLE , NEXUS_VERSION_GIT_COMMIT MAJOR AND MINOTR VERSION declartion

GIT_COMMIT = bat (returnStdout:true, script:"sh -x -c \"git rev-parse HEAD \"").trim().split('\n')[1]
echo " GIT_COMMIT:$GIT_COMMIT}"
NEXUS_VERSION= bat (returnStdout:true, script:"sh -x -c \"git-list ${GIT_COMMIT} --count \"").trim().split('\n')[1]
echo "NEXUS_VERSION: ${NEXUS_VERSION}
GIT_SIMPLE = bat (returnStdout:true, script:"sh -x -c \"git-list ${GIT_COMMIT}|head -n 1 | cut -c 1-7 \"").trim().split('\n')[1]
echo "GIT_SIMPLE: ${GIT_SIMPLE}
mv1 = bat (returnStdout:true, script:"sh -x -c \" echo ${BUILD_VERSION} |cut -d. -f1 \"").trim().split('\n')[1]
mv2 = bat (returnStdout:true, script:"sh -x -c \" echo ${BUILD_VERSION} |cut -d. -f2 \"").trim().split('\n')[1]
majorVersion = mv1 + "."+mv2
echo "majorVersion:${majorVersion}"
minorVersion = bat (returnStdout:true, script:"sh -x -c \" echo ${BUILD_VERSION} |cut -d. -f3 \"").trim().split('\n')[1]
echo "minorVersion:${minorVersion}"














